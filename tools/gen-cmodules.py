#!/usr/bin/env python

# Generate genhdr/cmodules.h for inclusion in py/objmodule.c.

from __future__ import print_function

import sys
import os
import re
from glob import glob

def update_modules(path):
    modules = []
    for module in sorted(os.listdir(path)):
        if not os.path.isfile('%s/%s/micropython.mk' % (path, module)):
            continue # not a module

        defined = False
        for (root, dirs, files) in os.walk(os.path.join(path, module)):
            for f in files:
                with open(os.path.join(root, f), 'r') as modfile:
                    for line in modfile:
                        for module in re.findall(r' mp_obj_module_t (\S+?)_(\S+) ', line):
                            defined = True
                            modules.append(module)

        if not defined:
            modules.append((module, 'user_cmodule'))

    # Print header file for all external modules.
    print('// Automatically generated by genmodules.py.\n')
    for module in modules:
        print('extern const struct _mp_obj_module_t %s_%s;' % module)
    print('\n#define MICROPY_EXTRA_BUILTIN_MODULES \\')
    for module in modules:
        print('    { MP_ROM_QSTR(MP_QSTR_%s), MP_ROM_PTR(& %s_%s) }, \\' % (module[0], module[0], module[1]))
    print()

if __name__ == '__main__':
    update_modules(sys.argv[1])
